generator client {
   provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime? @map("email_verified")
  image                 String?
  password              String?
  edv                   String?
  cpf                   String?
  role                  UserRole @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  posts         Post[]
  events        Event[]
 
  @@map("users")
}

model Place {
  id           String @id @default(cuid())
  name         String
  type         TypeOfPlace @relation(fields: [typeId], references: [id])
  typeId       String @map("type_id")
  maxCapacity  Int
  events       Event[]

  @@unique([name, typeId])
  @@map("places")
}

model TypeOfPlace {
  id String @id @default(cuid())
  name String
  places Place[]


  @@map("types_of_places")
}

model Event {
  id        String   @id @default(cuid())
  name      String?
  date      DateTime
  placeId   String   @map("place_id")
  place     Place    @relation(fields: [placeId], references: [id])
  renter    User      @relation(fields: [renterId], references: [id])
  renterId  String  @map("renter_id")
  
  startTime DateTime?
  endTime   DateTime?

  @@map("events")
}



model Post{
  id        String @id @default(cuid())
  title     String
  content   String
  published Boolean @default(false)
  authorId  String @map("author_id")
  author    User @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String @id @default(cuid())
  userId  String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}