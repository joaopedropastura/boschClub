generator client {
   provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  edv           String?
  role          UserRole @default(USER)
  accounts      Account[]
 
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime


  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}



// model Place {
//   id String @id @default(cuid())
//   name String
//   location String
//   // author User @relation(fields: [authorId], references: [id])
//   authorId String
// }

// model Event {
//   id String @id @default(cuid())
//   name String
//   date DateTime
//   // author User @relation(fields: [authorId], references: [id])
//   authorId String
// }

// model Post {
//   id String @id @default(cuid())
//   title String
//   content String
//   published Boolean @default(false)
//   // author User @relation(fields: [authorId], references: [id])
//   authorId String
// }